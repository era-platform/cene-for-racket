\= prelude.cene
\=
\= Cene built-ins that can be defined in terms of a (mostly) smaller
\= set of built-ins.

\=   Copyright 2019 The Era Authors
\=
\=   Licensed under the Apache License, Version 2.0 (the "License");
\=   you may not use this file except in compliance with the License.
\=   You may obtain a copy of the License at
\=
\=       http://www.apache.org/licenses/LICENSE-2.0
\=
\=   Unless required by applicable law or agreed to in writing,
\=   software distributed under the License is distributed on an
\=   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
\=   either express or implied. See the License for the specific
\=   language governing permissions and limitations under the License.


\= TODO: Finish implementing `extfx-read-bounded-exprs`.

\= TODO: Work up to defining `defn` and `def-macro`. In order to do
\= that, we've been porting things to Cene that we've already
\= implemented on the Racket side.

\= TODO: If we define anything that should be visible to user-supplied
\= Cene code but that doesn't make sense to define with
\= `prelude-to-everyone-def-func-blame` (e.g. a macro or a struct tag
\= rather than a function), let's make it visible using
\= `extfx-add-init-package-step`.

\= TODO: See if we should rename this.
(prelude-to-everyone-def-func-blame
  errb implicit-bl explicit-bl message
  (follow-heart/clamor-err explicit-bl message))

(prelude-to-everyone-def-func-blame
  fix f-bl f
  (fn-blame arg-bl arg
    (c-blame arg-bl (c-blame f-bl f f) arg)))

(prelude-to-everyone-def-func-blame
  just-value bl m
  (cast m just s
    [errb bl /str-prim:Expected m to be a just]
    s))

\= TODO: See if we'll use this.
\= TODO: See if this should verify its output is a maybe as well.
(prelude-to-everyone-def-func-blame
  maybe-bind bl m then
  (case m nothing (nothing)
  /cast m just s
    [errb bl /str-prim:Expected m to be a nothing or a just]
  /c-blame bl then s))

(prelude-to-everyone-def-func-blame
  not bl b
  (case b yep b (nope b)
  /case b nope b (yep b)
    [errb bl /str-prim:Expected b to be a yep or a nope]))

\= NOTE: We could also call this `either-bind`.
\= TODO: See if this should verify its output is an either as well.
(prelude-to-everyone-def-func-blame
  and bl a get-b
  (case a nope s (nope s)
  /cast a yep s
    [errb bl /str-prim:Expected a to be a yep or a nope]
  /c-blame bl get-b s))

(prelude-to-everyone-def-func-blame
  list-length bl xs
  (case xs nil (int-zero)
  /cast xs cons x xs
    [errb bl /str-prim:Expected xs to be a cons list]
  /pure-run-getfx /getfx-call-fuse (fuse-int-by-plus) (int-one)
    (c-blame bl (prelude-to-everyone-construct list-length) xs)))

(prelude-to-everyone-def-func-blame
  is-blame bl x
  (pure-run-getfx/getfx-is-in-dex (dex-blame) x))

(prelude-to-everyone-def-func-blame
  is-name bl x
  (pure-run-getfx/getfx-is-in-dex (dex-name) x))

(prelude-to-everyone-def-func-blame
  is-dex bl x
  (pure-run-getfx/getfx-is-in-dex (dex-dex) x))

(prelude-to-everyone-def-func-blame
  is-cline bl x
  (pure-run-getfx/getfx-is-in-dex (dex-cline) x))

(prelude-to-everyone-def-func-blame
  pure-compare-by-cline-force bl cline a b
  (cast (is-cline cline) yep -
    [errb bl /str-prim:Expected cline to be a cline]
  /cast (pure-run-getfx/getfx-compare-by-cline cline a b)
    just result
    [errb bl /str-prim:Expected a and b to be elements of the given cline]
    result))

(prelude-to-everyone-def-func-blame
  pure-is-lt bl cline a b
  (case
    (c-blame bl
      (prelude-to-everyone-construct pure-compare-by-cline-force)
      cline
      a
      b)
    ordering-lt
    (yep/nil)
    (nope/nil)))

(prelude-to-everyone-def-func-blame
  pure-is-gt bl cline a b
  (c-blame bl (prelude-to-everyone-construct pure-is-lt) cline b a))

(prelude-to-everyone-def-func-blame
  pure-is-lte bl cline a b
  (not /c-blame bl (prelude-to-everyone-construct pure-is-gt)
    cline a b))

(prelude-to-everyone-def-func-blame
  pure-is-gte bl cline a b
  (c-blame bl (prelude-to-everyone-construct pure-is-lte) cline b a))

(prelude-to-everyone-def-func-blame
  getfx-map bl effects func
  (cast (is-getfx effects) yep -
    [errb bl /str-prim:Expected effects to be a getfx value]
  /getfx-bind effects /fn intermediate
  /getfx-done /c-blame bl func intermediate))

\= TODO: See if this is really the way we want to implement this. What
\= if calling the fuse is expensive?
(prelude-to-everyone-def-func-blame
  getfx-in-fuse bl fuse x
  (getfx-map (getfx-call-fuse fuse x x) /fn maybe-fused
    (case maybe-fused just -
      (yep/nil)
      (nope/nil))))

(prelude-to-everyone-def-func-blame
  is-extfx bl x
  (pure-run-getfx/getfx-in-fuse (fuse-extfx) x))

(prelude-to-everyone-def-func-blame
  is-int bl x
  (pure-run-getfx/getfx-is-in-dex (dex-int) x))

(prelude-to-everyone-def-func-blame
  is-nat bl x
  (and (is-int x) /fn -
  /pure-is-lte (cline-int) (int-zero) x))

(prelude-to-everyone-def-func-blame
  nat-to-maybe bl n
  (cast (is-nat n) yep -
    [errb bl /str-prim:Expected n to be a natural number]
  /cast (pure-is-lt (cline-int) (int-zero) n) yep - (nothing)
  /just /int-minus n /int-one))

(prelude-to-everyone-def-func-blame
  name-of-string bl string
  (cast (pure-run-getfx/getfx-name-of (dex-string) string) just result
    [errb bl /str-prim:Expected string to be a string]
    result))

(prelude-to-everyone-def-func-blame
  give3 bl a1 a2 a3 f
  (c-blame bl f a1 a2 a3))

(prelude-to-everyone-def-func-blame
  loop3 bl s1 s2 s3 body
  (c-blame bl (prelude-to-everyone-construct give3) s1 s2 s3
    (c-blame bl (prelude-to-everyone-construct fix) body)))


(prelude-to-everyone-def-func-blame
  extfx-claim-and-split bl unique-name n then
  (cast (is-authorized-name unique-name) yep -
    [errb bl /str-prim:Expected unique-name to be an authorized name]
  /cast (is-nat n) yep -
    [errb bl /str-prim:Expected n to be a natural number]
  /extfx-claim unique-name /fn -
  /loop3 n unique-name (nil) /fn next n next-name names
    (cast (nat-to-maybe n) just n (c-blame bl then names)
    /let first
      (authorized-name-subname
        (just-value/pure-run-getfx/getfx-name-of
          (dex-prelude-to-prelude-struct unique-name-for-split-first)
          (prelude-to-prelude-construct unique-name-for-split-first))
        next-name)
    /let rest
      (authorized-name-subname
        (just-value/pure-run-getfx/getfx-name-of
          (dex-prelude-to-prelude-struct unique-name-for-split-rest)
          (prelude-to-prelude-construct unique-name-for-split-rest))
        next-name)
    /c next n rest /cons first names)))

(prelude-to-everyone-def-func-blame
  extfx-claim-freshen bl unique-name then
  (cast (is-authorized-name unique-name) yep -
    [errb bl /str-prim:Expected unique-name to be an authorized name]
  /extfx-claim-and-split unique-name (int-one) /fn unique-names
  /cast unique-names cons unique-name -
    [errb bl /str-prim:Internal error: Expected the list resulting from extfx-claim-and-split to be a list of the requested length]
  /c-blame bl then unique-name))


\= This reads expressions until it gets to a closing bracket.
(prelude-to-everyone-def-func-blame
  extfx-read-bounded-exprs
  implicit-bl explicit-bl unique-name qualify text-input-stream then
  
  \= TODO: Implement this.
  (nil))

\= This reads expressions until it gets to a closing bracket, and it
\= verifies that there are precisely `n` of them.
(prelude-to-everyone-def-func-blame
  extfx-read-bounded-specific-number-of-exprs
  implicit-bl explicit-bl unique-name qualify text-input-stream n then
  
  (cast (is-blame explicit-bl) yep -
    [errb implicit-bl /str-prim:Expected explicit-bl to be a blame value]
  /cast (is-authorized-name unique-name) yep -
    [errb implicit-bl /str-prim:Expected unique-name to be an authorized name]
  /cast (is-text-input-stream text-input-stream) yep -
    [errb implicit-bl /str-prim:Expected text-input-stream to be a text input stream]
  /cast (is-nat n) yep -
    [errb implicit-bl /str-prim:Expected n to be a natural number]
  /extfx-text-input-stream-freshen text-input-stream
    [fn - /errb implicit-bl /str-prim:Expected text-input-stream to be an unspent text input stream]
  /fn text-input-stream
  /extfx-read-bounded-exprs
    explicit-bl unique-name qualify text-input-stream
  /fn unique-name qualify text-input-stream exprs
  /let actual-n (list-length exprs)
  /case (pure-is-lt (cline-int) n actual-n) yep -
    \= TODO FAULT: Make this `explicit-bl` more specific.
    [errb explicit-bl /str-prim:Encountered too many expressions]
  /case (pure-is-lt (cline-int) actual-n n) yep -
    \= TODO FAULT: Make this `explicit-bl` more specific.
    [errb explicit-bl /str-prim:Expected another expression]
  /let effects
    (c-blame implicit-bl then
      unique-name qualify text-input-stream exprs)
  /cast (is-extfx effects) yep -
    [errb implicit-bl /str-prim:Expected the return value of an extfx-read-bounded-specific-number-of-exprs callback to be an extfx effectful computation]
    effects))


(prelude-to-everyone-def-func-blame
  extfx-def-fallibly-dexed-value-for-lang-impl
  bl unique-name target-name dex value
  
  (cast (is-authorized-name unique-name) yep -
    [errb bl /str-prim:Expected unique-name to be an authorized name]
  /cast (is-authorized-name target-name) yep -
    [errb bl /str-prim:Expected target-name to be an authorized name]
  /cast (is-dex dex) yep -
    [errb bl /str-prim:Expected dex to be a dex]
  /extfx-claim unique-name /fn -
  /extfx-put target-name dex value))

(prelude-to-everyone-def-func-blame
  extfx-def-fallibly-dexed-value-for-package
  bl unique-name target-name dex value
  (cast (is-authorized-name unique-name) yep -
    [errb bl /str-prim:Expected unique-name to be an authorized name]
  /cast (is-name target-name) yep -
    [errb bl /str-prim:Expected target-name to be a name]
  /cast (is-dex dex) yep -
    [errb bl /str-prim:Expected dex to be a dex]
  /extfx-claim-freshen unique-name /fn unique-name
  /extfx-add-init-package-step unique-name
  /fn unique-name qualify-for-package
    (extfx-claim unique-name /fn -
    /extfx-put (c qualify-for-package target-name) dex value)))

(prelude-to-everyone-def-func-blame
  extfx-def-value-for-lang-impl bl unique-name target-name value
  (cast (is-authorized-name unique-name) yep -
    [errb bl /str-prim:Expected unique-name to be an authorized name]
  /cast (is-authorized-name target-name) yep -
    [errb bl /str-prim:Expected target-name to be an authorized name]
  /extfx-claim-freshen unique-name /fn unique-name
  /extfx-def-fallibly-dexed-value-for-lang-impl
    unique-name target-name (dex-give-up) value))

(prelude-to-everyone-def-func-blame
  extfx-def-value-for-package bl unique-name target-name value
  (cast (is-authorized-name unique-name) yep -
    [errb bl /str-prim:Expected unique-name to be an authorized name]
  /cast (is-name target-name) yep -
    [errb bl /str-prim:Expected target-name to be a name]
  /extfx-claim-freshen unique-name /fn unique-name
  /extfx-def-fallibly-dexed-value-for-package
    unique-name target-name (dex-give-up) value))


(prelude-to-everyone-def-func-blame
  macro-impl body-bl body
  (fn-blame macro-bl
    unique-name qualify text-input-stream output-stream then
    
    (cast (is-authorized-name unique-name) yep -
      [errb macro-bl /str-prim:Expected unique-name to be an authorized name]
    /cast (is-text-input-stream text-input-stream) yep -
      [errb macro-bl /str-prim:Expected text-input-stream to be a text input stream]
    /cast (is-expr-sequence-output-stream output-stream) yep -
      [errb macro-bl /str-prim:Expected output-stream to be an expression sequence output stream]
    /extfx-text-input-stream-freshen text-input-stream
      [fn - /errb macro-bl /str-prim:Expected text-input-stream to be an unspent text input stream]
    /fn text-input-stream
    /extfx-expr-sequence-output-stream-freshen output-stream
      [fn - /errb macro-bl /str-prim:Expected output-stream to be an unspent expression sequence output stream]
    /fn output-stream
    /let effects
      (c body
        macro-bl unique-name qualify text-input-stream output-stream
      /fn unique-name qualify text-input-stream output-stream
      /let effects
        (c-blame macro-bl then
          unique-name qualify text-input-stream output-stream)
      /cast (is-extfx effects) yep -
        [errb macro-bl /str-prim:Expected the return value of a macro's callback to be an extfx effectful computation]
        effects)
    /cast (is-extfx effects) yep -
      [errb body-bl /str-prim:Expected the return value of a macro-impl body to be an extfx effectful computation]
      effects)))

\= This creates a macro implementation function that reads a form body
\= of precisely `n-args` cexprs, then writes a single cexpr computed
\= from those using `body`.
(prelude-to-everyone-def-func-blame
  macro-impl-specific-number-of-args body-bl n-args body
  (cast (is-nat n-args) yep -
    [errb body-bl /str-prim:Expected n-args to be a natural number]
  /macro-impl
  /fn
    macro-bl unique-name qualify text-input-stream output-stream then
    
    (extfx-read-fault text-input-stream /fn text-input-stream expr-bl
    /let read-bl (make-blame-read macro-bl expr-bl)
    /extfx-read-bounded-specific-number-of-exprs
      macro-bl unique-name qualify text-input-stream n-args
    /fn unique-name qualify text-input-stream args
    /extfx-expr-write output-stream
      (c-blame body-bl body read-bl args)
    /fn output-stream
    /let effects
      (c-blame macro-bl then
        unique-name qualify text-input-stream output-stream)
    /cast (is-extfx effects) yep -
      [errb macro-bl /str-prim:Expected the return value of a macro-impl-specific-number-of-args callback to be an extfx effectful computation]
      effects)))


\= TODO: See if we should remove this. It just serves as a
\= demonstration of how to use `directive` directly.
(directive /fn root-unique-name root-qualify
  (extfx-noop))
