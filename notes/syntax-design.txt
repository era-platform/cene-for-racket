Overhauled Cene syntax:


In these examples, let "abc" represent identifier text, and let "#" represent any character other than an identifier character, a whitespace character, `[`, `]`, `(`, `)`, `\`, `.`, or `:`. Let "<op>" represent any of the following patterns, where `markup` means that part of the text is read and processed as markup where interpolations are not allowed.

  #
  abc:
  abc
  (markup):
  (markup)
  [markup]:
  [markup]

When "<op>" is used in one of these examples, let `op` refer to the text of `#` or of `abc` or of the result of processing the markup.


In an expression context, end of file accumulates zero expressions, then ends.


In an expression context, whitespace does nothing, then proceeds as usual.


In an expression context, a span of identifier text accumulates one expression consisting of a variable access to the result of qualifying the name obtained from the text, then proceeds as usual.

  abc


In an expression context, this invokes the freestanding expression reader macro of `op`, then proceeds as usual.

  \<op>...


In an expression context, this runs the bounded expression reader macro of `op`, then assumes the next character is a closing bracket and consumes it, then proceeds as usual.

(These are usually written without the dot, taking advantage of the usual nameless bounded expression reader macros. The dot version is supported primarily for consistency with the markup syntax.)

  (.<op>...)
  [.<op>...]


In an expression context, this runs the bounded expression reader macro of `op`. It does not consume the character after that, even though it's usually a closing bracket. Then it proceeds as usual.

(These are usually written without the dot, taking advantage of the usual nameless bounded expression reader macro. The dot version is supported primarily for consistency with the markup syntax.)

  /.<op>...


In an expression context, an opening bracket or / not followed by . behaves similarly to if it were followed by . but it uses a nameless bounded expression reader macro instead of a named macro.

  (...)
  [...]
  /


In an expression context, this causes an unmatched bracket error.

  )
  ]


In a markup context, end of file accumulates no text, then ends.


In a markup context, a span of typical characters (whitespace and non-whitespace) accumulates corresponding text, then proceeds as usual.


In an expression context, this invokes the freestanding expression reader macro of `op` (while remembering the literal text that started this macro call), then proceeds as usual.

  \<op>...


In a markup context, this runs the bounded markup reader macro of `op` (while remembering the literal text that started this macro call, the corresponding closing bracket to look for, and the accumulatable text of the corresponding closing bracket), then assumes the next character is a closing bracket and consumes it, then proceeds as usual.

  (.<op>...)
  [.<op>...]


In a markup context, this runs the bounded markup reader macro of `op` (while remembering the literal text that started this macro call, the corresponding closing bracket to look for, and the text "" as the accumulatable text of the corresponding closing bracket). It does not consume the character after that, even though it's usually a closing bracket. Then it proceeds as usual.

  /.<op>...


In a markup context, an opening bracket or / not followed by . behaves similarly to if it were followed by . but it uses a nameless bounded markup reader macro instead of a named macro.

  (...)
  [...]
  /


In a markup context, this causes an unmatched bracket error.

  )
  ]


Typical macros:

Freestanding expression reader macro `=`: Line comment.

Nameless bounded expression reader macro: Reads something like the pattern `<op>`, then runs the bounded expression reader macro of `op`.

Freestanding markup reader macro `=`: Line comment.

Freestanding markup reader macros ``` (the grave accent character) `,` `<` `>` `{` `}`: Accumulates the character `\`, `.`, `[`, `]`, `(`, or `)` respectively.

Freestanding markup reader macro `#`: A whitespace normalization command that recommends removing surrounding raw whitespace and inserting nothing.

Freestanding markup reader macros `s` `t` `r` `n`: A whitespace normalization command that recommends removing surrounding raw whitespace and inserting a space, a tab, a carriage return, or a newline, respectively. The inserted character is not considered "raw" whitespace.

Nameless bounded markup reader macro: Accumulates the literal text that started the macro call, then proceeds as usual until it reaches a corresponding closing bracket (without consuming it), then accumulates the accumulatable text of the corresponding closing bracket.

Bounded markup reader macros `qq` `uq`: Respectively increments or decrements the quoting depth temporarily while it accumulates the markup in its body. Most markup reader macros operate normally at a depth of 1, cause an error at any lower depth, and accumulate their own syntax's non-whitespace text and raw whitespace at any greater depth.

Bounded markup reader macro `ex` (standing for "expression"): Operates normally at quoting depth 0, where it reads a single expression in its body and accumulates a markup interpolation containing that expression.

Bounded expression reader macro `istr`: Reads its body as markup, reduces raw whitespace sequences to a single space each, follows whitespace normalization commands, and accumulates a single expression that evaluates any interpolated expressions in the markup and then constructs a function which, when passed a function which takes a string and returns an extfx computation, returns an extfx computation that concatenates those expressions' results with the rest of the markup text and then passes the concatenated result string to the given function.


Examples:

Line comment: \= ...
String interpolation when there's an `\n` escape: [istr/.qq:Hello, \n [.uq/.ls name]!]
String interpolation when the only escape is `[.ls ...]`: [istr:Hello, [.ls name]!]


Reader macro behavior:

When a reader macro is defined, the definition runs an expression to determine its implementation function. This expression has a local variable which is bound to a first-class scope value representing the place where it was defined.

For an expression reader macro, the implementation function receives a scope representing the call site; a text input stream; a sequence-of-expressions output stream; and a callback to call with the rest of the input stream and output stream once the macro's computation is finished. The implementation function and its function are process constructors, each returning a value that represents a side effect. The side effects ("extfx," for "extension effects") do things like reading and writing to the streams, orchestrating concurrent computations, and reading and writing from a global definition space.

For a markup reader macro, the implementation function is similar, but it receives a markup output stream instead of a sequence-of-expressions output stream. The markup output stream can be written to with text, with interpolated expressions, or with spans of raw whitespace (whitespace which is eligible for being normalized).

A scope consists of two values: A unique name, and a "qualify" function that converts names that have been constructed from surface syntax into names that should be referenced in the global definition space. The unique name should be replaced with a fresh one whenever passing the scope along to a subcomputation. Every extfx computation that receives a scope should first write a dummy value to a name derived in a certain way from the scope's unique name, so that it can be sure no similar computation has been given access to that unique name.
